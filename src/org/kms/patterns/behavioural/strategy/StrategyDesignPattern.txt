Strategy design pattern is one of the behavioral design pattern.

Strategy pattern is used when we have multiple algorithm for a specific task and client decides the actual implementation to be used at runtime.

Strategy pattern is also known as Policy Pattern. We define multiple algorithms and let client application pass the algorithm to be used as a parameter.

One of the best example of strategy pattern is Collections.sort() method that takes Comparator parameter. Based on the different implementations of Comparator interfaces, the Objects are getting sorted in different ways.


Strategy design pattern is based upon open closed design principle, the 'O' of famous SOLID design principles. It's one of the popular pattern in the field of object-oriented analysis and design.
-----------------------------------------------------------------------------
OPEN CLOSED PRINCIPLE:

Strategy pattern allows you to encapsulate possible changes in a process and encapsulate that in a Strategy class. 

This makes your process open for extension by providing new Strategy implementation, but closed for modification, because the introduction of a new strategy doesn't require a change in a tested method. 

That's how it confirms open closed design principle.


Strategy pattern is open for extension, you can provide any no of implementations.

Strategy pattern is closed for modification of the actual service that uses the strategy.


-----------------------------------------------------------------------------

Strategy pattern is very useful, especially for implementing algorithmic strategy e.g. encryption, compression, comparison etc.

A couple of examples of Strategy pattern from JDK is Comparator and LayoutManager. 

You can view Comparator as Strategy interface, define compare() method, now it's up to the classes how they compare themselves.

This method is utilized for sorting inside Collections.sort(), which confirms OCP(Open closed principle) because it doesn't require any change when comparison logic changes. 

Similarly LayoutManager e.g. GridLayout, BorderLayout helps you to organize components differently.
-----------------------------------------------------------------------------------
Strategy pattern is useful when we have multiple algorithms for
specific task and we want our application to be flexible to choose any
of the algorithm at runtime for specific task.

------------------------------------------------------------------------------------

