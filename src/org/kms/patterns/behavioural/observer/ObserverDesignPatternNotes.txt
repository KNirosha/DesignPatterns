Observer Design Pattern
------------------------
Intent:

Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.

Encapsulate the core (or common or engine) components in a Subject abstraction, and the variable (or optional or user interface) components in an Observer hierarchy.

----------------------------------------------------------
Observer Pattern is one of the behavioral design pattern. 

Observer design pattern is useful when you are interested in the state of an object and want to get notified whenever there is any change. 

In observer pattern, the object that watch on the state of another object are called Observer and the object that is being watched is called Subject.

Observer: It watches the state of another object<<Subject>>.
Subject: It is the object being observed.

Simple Example!!! Cricket Scoring

N- no of audience will observe the score board.

Here score board is the subject that is being observed by audience(observers)

The observer pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.

The object which is being watched is called the subject. The objects which are watching the state changes are called observers or listeners.

Example:

Consider a subject : Stock

When ever stock price get changed then it should be notified to all stock brokers.

Observers: StockBrokers

=========================================
Explanation for our example:

Subject is an interface that contains 3 important methods as follows:
-------------------------------------------
public interface Subject {
	
	void notifyUpdate(Subject Subject);---> Will notify the state change in subject to all observers.
	void addObserver(Observer observer);---> Add the observer.
	void deleteObserver(Observer observer);---> Delete the observer.

}
------------------------------------------------
We have Stock and Loan are two subjects that implements Subject interface and provided impl for 3 methods.
---------------------------------------------------
public class Loan implements Subject{
	
	String loanType;
	double rateOfInterest;
	
	List<Observer> loanObservers=new ArrayList<Observer>();
	
	
	public String getLoanType() {
		return loanType;
	}



	public void setLoanType(String loanType) {
		this.loanType = loanType;
	}



	public double getRateOfInterest() {
		return rateOfInterest;
	}



	public void setRateOfInterest(double rateOfInterest) {
		this.rateOfInterest = rateOfInterest;
		System.out.println("************OBSERVERS STARTED");
		notifyUpdate(this);
	}



	public void notifyUpdate(Subject subject) {
		for(Observer ob: loanObservers){
			ob.observe(this);
		}
		
	}



	public void addObserver(Observer observer) {
		loanObservers.add(observer);
		
	}



	public void deleteObserver(Observer observer) {
		
		loanObservers.remove(observer);
	}



	@Override
	public String toString() {
		return "Loan [loanType=" + loanType + ", rateOfInterest="
				+ rateOfInterest + "]";
	}
	
	

}

-----------------------------------------------------------------
Here, we have List<Observer> loanObservers=new ArrayList<Observer>(); this will contain all the observers.

public void setRateOfInterest(double rateOfInterest) {
		this.rateOfInterest = rateOfInterest;
		System.out.println("************OBSERVERS STARTED");
		notifyUpdate(this);
	}

In the setter method of setRateOfInterest(), we are notifying the all observers saying that rate of interest is getting updated.

====================================================================
Twitter!!!: In twitter when a person writes a tweet, then all his followers get notified about tweet.

Facebook!!!: In Facebook, if we write any comment, it will be notified to all our friends.

=================================================================
IMPORTANT NOTE:

Java provides inbuilt platform for implementing Observer pattern through java.util.Observable class and java.util.Observer interface. 

However it’s not widely used because the implementation is really simple and most of the times we don’t want to end up extending a class just for implementing Observer pattern as java doesn’t provide multiple inheritance in classes.



